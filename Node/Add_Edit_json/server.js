const express = require('express');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));

const jsonFilePath = path.join(__dirname, 'data.json');

// üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö JSON
app.get('/api/data/:id', (req, res) => {
  const id = req.params.id;

  fs.readFile(jsonFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞' });
    }

    const jsonData = JSON.parse(data);
    if (!jsonData[id]) {
      return res.status(404).json({ error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(jsonData[id]);
  });
});

// ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö JSON
app.put('/api/data/:id', (req, res) => {
  const id = req.params.id;
  const { positionX, positionY, vycka, date, systemCoordinates, positionType } = req.body;

  fs.readFile(jsonFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞' });
    }

    let jsonData = JSON.parse(data);

    if (!jsonData[id]) {
      return res.status(404).json({ error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    jsonData[id] = {
      position:  [positionX,positionY],
      vycka: Number(vycka),
      date,
      systemCoordinates,
      positionType
    };

    fs.writeFile(jsonFilePath, JSON.stringify(jsonData, null, 2), (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON-—Ñ–∞–π–ª–∞' });
      }
      res.json({ success: true, message: `–î–∞–Ω–Ω—ã–µ –¥–ª—è ID ${id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.` });
    });
  });
});

// ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.post('/api/data/', (req, res) => {
  const { id, positionX, positionY, vycka, date, systemCoordinates, positionType } = req.body;

  fs.readFile(jsonFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞' });
    }

    let jsonData = JSON.parse(data);

    if (jsonData[id]) {
      return res.status(400).json({ error: '–≠–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    jsonData[id] = {
      position: [positionX,positionY],
      vycka: Number(vycka),
      date,
      systemCoordinates,
      positionType
    };

    fs.writeFile(jsonFilePath, JSON.stringify(jsonData, null, 2), (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON-—Ñ–∞–π–ª–∞' });
      }
      res.json({ success: true, message: `–î–∞–Ω–Ω—ã–µ –¥–ª—è ID ${id} –¥–æ–±–∞–≤–ª–µ–Ω—ã.` });
    });
  });
});

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
app.delete('/api/data/:id', (req, res) => {
  const id = req.params.id;

  fs.readFile(jsonFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞' });
    }

    let jsonData = JSON.parse(data);

    if (!jsonData[id]) {
      return res.status(404).json({ error: '–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    delete jsonData[id]; // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID

    fs.writeFile(jsonFilePath, JSON.stringify(jsonData, null, 2), (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON-—Ñ–∞–π–ª–∞' });
      }
      res.json({ success: true, message: `–î–∞–Ω–Ω—ã–µ –¥–ª—è ID ${id} —É–¥–∞–ª–µ–Ω—ã.` });
    });
  });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 4000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});